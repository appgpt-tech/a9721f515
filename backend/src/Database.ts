// Source code generated by AppGPT (www.appgpt.tech)

 //Class to create tables and seed new database
import { DataSource } from "typeorm";
import { DBConfiguration } from "./Configuration";
import { SettingsEntity } from "./db/Settings.entity";
//autogenerate imports based on resources
import { booksEntity } from "./db/books.entity";
import { authorsEntity } from "./db/authors.entity";
import { membersEntity } from "./db/members.entity";
import { loansEntity } from "./db/loans.entity";

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [SettingsEntity, booksEntity, authorsEntity, membersEntity, loansEntity];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables


    await Database.Seed();
  }
  static async Seed() {
    let data: any = {"books":[{"Title":"Title 1","Author":1,"ISBN":"ISBN 1","PublicationDate":"2024-12-25T15:22:18.964Z","Genre":"Genre 1","id":2},{"Title":"Title 2","Author":2,"ISBN":"ISBN 2","PublicationDate":"2023-07-09T04:20:29.447Z","Genre":"Genre 2","id":55},{"Title":"Title 3","Author":3,"ISBN":"ISBN 3","PublicationDate":"2023-05-25T00:51:24.954Z","Genre":"Genre 3","id":51},{"Title":"Title 4","Author":4,"ISBN":"ISBN 4","PublicationDate":"2024-11-04T00:24:36.006Z","Genre":"Genre 4","id":48},{"Title":"Title 5","Author":5,"ISBN":"ISBN 5","PublicationDate":"2023-11-28T12:23:50.661Z","Genre":"Genre 5","id":91}],"authors":[{"Name":"Name 1","Biography":"Biography 1","DateOfBirth":"2023-12-19T05:09:11.273Z","Nationality":"Nationality 1","id":59},{"Name":"Name 2","Biography":"Biography 2","DateOfBirth":"2023-10-16T20:40:33.359Z","Nationality":"Nationality 2","id":64},{"Name":"Name 3","Biography":"Biography 3","DateOfBirth":"2025-01-21T05:53:57.314Z","Nationality":"Nationality 3","id":83},{"Name":"Name 4","Biography":"Biography 4","DateOfBirth":"2023-05-14T15:30:42.393Z","Nationality":"Nationality 4","id":62},{"Name":"Name 5","Biography":"Biography 5","DateOfBirth":"2024-06-20T07:59:54.197Z","Nationality":"Nationality 5","id":37}],"members":[{"MemberID":"MemberID 1","Name":"Name 1","EmailAddress":"EmailAddress 1","PhoneNumber":"PhoneNumber 1","Address":"Address 1","MembershipStartDate":"2024-02-16T11:17:31.448Z","id":68},{"MemberID":"MemberID 2","Name":"Name 2","EmailAddress":"EmailAddress 2","PhoneNumber":"PhoneNumber 2","Address":"Address 2","MembershipStartDate":"2023-10-17T00:23:31.113Z","id":75},{"MemberID":"MemberID 3","Name":"Name 3","EmailAddress":"EmailAddress 3","PhoneNumber":"PhoneNumber 3","Address":"Address 3","MembershipStartDate":"2023-06-04T09:47:15.965Z","id":33},{"MemberID":"MemberID 4","Name":"Name 4","EmailAddress":"EmailAddress 4","PhoneNumber":"PhoneNumber 4","Address":"Address 4","MembershipStartDate":"2024-07-25T11:00:16.839Z","id":52},{"MemberID":"MemberID 5","Name":"Name 5","EmailAddress":"EmailAddress 5","PhoneNumber":"PhoneNumber 5","Address":"Address 5","MembershipStartDate":"2024-04-13T05:48:59.086Z","id":65}],"loans":[{"LoanID":"LoanID 1","Book":1,"Member":1,"LoanDate":"2024-01-09T12:42:53.903Z","DueDate":"2024-04-03T18:08:33.072Z","ActualReturnDate":"2023-04-30T20:01:18.363Z","id":24},{"LoanID":"LoanID 2","Book":2,"Member":2,"LoanDate":"2025-01-03T23:12:10.445Z","DueDate":"2023-11-26T10:31:49.773Z","ActualReturnDate":"2024-11-19T16:40:35.586Z","id":29},{"LoanID":"LoanID 3","Book":3,"Member":3,"LoanDate":"2024-11-10T19:06:25.928Z","DueDate":"2023-05-12T16:47:47.826Z","ActualReturnDate":"2023-05-11T12:11:47.737Z","id":9},{"LoanID":"LoanID 4","Book":4,"Member":4,"LoanDate":"2023-08-24T04:29:08.406Z","DueDate":"2024-09-01T22:01:49.679Z","ActualReturnDate":"2024-02-06T20:00:52.371Z","id":71},{"LoanID":"LoanID 5","Book":5,"Member":5,"LoanDate":"2024-12-10T21:55:09.505Z","DueDate":"2025-02-13T14:13:30.541Z","ActualReturnDate":"2024-12-01T19:17:23.076Z","id":84}]};
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true){
      console.log('   Seeding database...');
      await this.SeedResource("booksEntity", data.books);
await this.SeedResource("authorsEntity", data.authors);
await this.SeedResource("membersEntity", data.members);
await this.SeedResource("loansEntity", data.loans); 
      await this.SeedResource("SettingsEntity", {
        settingname: "isSeeded",
        settingvalue: "true",
      });
    }else{
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository("SettingsEntity");
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: "isSeeded",
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table '+resourceName);
    await repo.upsert(resourceData, ["id"]);
  }
}

