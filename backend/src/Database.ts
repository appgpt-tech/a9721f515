// Source code generated by AppGPT (www.appgpt.tech)

 //Class to create tables and seed new database
import { DataSource } from "typeorm";
import { DBConfiguration } from "./Configuration";
import { SettingsEntity } from "./db/Settings.entity";
//autogenerate imports based on resources
import { booksEntity } from "./db/books.entity";
import { authorsEntity } from "./db/authors.entity";
import { membersEntity } from "./db/members.entity";
import { loansEntity } from "./db/loans.entity";

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [SettingsEntity, booksEntity, authorsEntity, membersEntity, loansEntity];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables


    await Database.Seed();
  }
  static async Seed() {
    let data: any = {"books":[{"title":"title 1","author":1,"ISBN":"ISBN 1","publicationDate":"2024-05-29T01:20:51.039Z","genre":"genre 1","status":"status 1","id":3},{"title":"title 2","author":2,"ISBN":"ISBN 2","publicationDate":"2023-10-07T23:33:33.219Z","genre":"genre 2","status":"status 2","id":88},{"title":"title 3","author":3,"ISBN":"ISBN 3","publicationDate":"2023-06-03T13:20:35.154Z","genre":"genre 3","status":"status 3","id":1},{"title":"title 4","author":4,"ISBN":"ISBN 4","publicationDate":"2023-04-14T06:02:21.054Z","genre":"genre 4","status":"status 4","id":45},{"title":"title 5","author":5,"ISBN":"ISBN 5","publicationDate":"2023-09-10T14:14:45.221Z","genre":"genre 5","status":"status 5","id":48}],"authors":[{"name":"name 1","biography":"biography 1","id":19},{"name":"name 2","biography":"biography 2","id":59},{"name":"name 3","biography":"biography 3","id":76},{"name":"name 4","biography":"biography 4","id":3},{"name":"name 5","biography":"biography 5","id":48}],"members":[{"memberID":"memberID 1","name":"name 1","emailAddress":"emailAddress 1","phoneNumber":"phoneNumber 1","address":"address 1","id":42},{"memberID":"memberID 2","name":"name 2","emailAddress":"emailAddress 2","phoneNumber":"phoneNumber 2","address":"address 2","id":94},{"memberID":"memberID 3","name":"name 3","emailAddress":"emailAddress 3","phoneNumber":"phoneNumber 3","address":"address 3","id":73},{"memberID":"memberID 4","name":"name 4","emailAddress":"emailAddress 4","phoneNumber":"phoneNumber 4","address":"address 4","id":39},{"memberID":"memberID 5","name":"name 5","emailAddress":"emailAddress 5","phoneNumber":"phoneNumber 5","address":"address 5","id":13}],"loans":[{"loanID":"loanID 1","memberID":1,"bookID":1,"issueDate":"2024-09-08T06:07:02.041Z","dueDate":"2023-11-13T12:26:11.295Z","id":1},{"loanID":"loanID 2","memberID":2,"bookID":2,"issueDate":"2024-06-07T04:27:52.353Z","dueDate":"2023-12-08T01:22:25.259Z","id":44},{"loanID":"loanID 3","memberID":3,"bookID":3,"issueDate":"2023-08-14T16:51:19.317Z","dueDate":"2023-11-18T17:05:41.773Z","id":30},{"loanID":"loanID 4","memberID":4,"bookID":4,"issueDate":"2023-04-17T19:50:05.272Z","dueDate":"2023-11-01T01:50:32.448Z","id":59},{"loanID":"loanID 5","memberID":5,"bookID":5,"issueDate":"2023-11-18T11:06:57.522Z","dueDate":"2024-06-08T11:55:17.545Z","id":45}]};
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true){
      console.log('   Seeding database...');
      await this.SeedResource("booksEntity", data.books);
await this.SeedResource("authorsEntity", data.authors);
await this.SeedResource("membersEntity", data.members);
await this.SeedResource("loansEntity", data.loans); 
      await this.SeedResource("SettingsEntity", {
        settingname: "isSeeded",
        settingvalue: "true",
      });
    }else{
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository("SettingsEntity");
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: "isSeeded",
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table '+resourceName);
    await repo.upsert(resourceData, ["id"]);
  }
}

